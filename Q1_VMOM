%% Parameters
c = 3e8;                  % Speed of light [m/s]
freq = 10e9;              % Frequency [Hz]
omega = 2 * pi * freq;    % Angular frequency [rad/s]
lambda = c / freq;        % Wavelength [m]
epsilon_cyl = 1.01;       % Relative permittivity of the cylinder

% Wave numbers
k = omega / c;           % Free-space wave number [1/m]
k_cyl = k * sqrt(epsilon_cyl); % Wave number inside the cylinder
% Incident wave properties
phi_inc = pi;        % Incident wave angle [rad]
E0 = 1;                  % Incident electric field amplitude

% Cylinder and simulation parameters
R = 3 * lambda;          % Cylinder radius [m]
d = 3 * R;               % Distance between cylinder centers [m]
%% Grid and Sampling Parameters
N = 200;             % Number of samples on each axis
Z = linspace(-2.5*d, 2.5*d + d - R, N); % z-coordinates
X = linspace(-2.5*d, 2.5*d + d - R, N); % x-coordinates
[z, x] = meshgrid(Z, X);  % Create 2D spatial grid

%% Grid Spacing
dx = X(2) - X(1); % Grid step size in x-direction
dz = Z(2) - Z(1); % Grid step size in z-direction

%% Build Object Function
O=zeros(length(Z));
O_mask = (x.^2 + z.^2 < R^2) | (x.^2 + (z - d).^2 < R^2);  % Boolean mask for scatterers
O_val = k_cyl^2 - k^2;
O(O_mask) = O_val;  % Set the O values where scatterers exist
len=nnz(O);
x_grid=zeros(1,len);
z_grid=zeros(1,len);

%% Parameterization
count_discratization=1;
for n=1:N
    for m=1:N
        if(O(n,m)~=0)
            x_grid(count_discratization)=x(n,m);
            z_grid(count_discratization)=z(n,m);
            count_discratization=count_discratization+1;
        end
    end
end

%% Build O matrix
diagonal_values = integral2(@(x,y) -1j/4*besselh(0,2,k*sqrt(x.^2+y.^2)),-dx/2,dx/2,-dz/2,dz/2); %The integral represents the self-term of the matrix elements
Omat = eye(len).*(k_cyl^2-k^2);%Construct the O matrix with diagonal elements given by (k_cyl^2 - k^2)
% Compute distances for off-diagonal elements
[X1, X2] = meshgrid(x_grid, x_grid);
[Z1, Z2] = meshgrid(z_grid, z_grid);
distances = sqrt((X2 - X1).^2 + (Z2 - Z1).^2); % Compute pairwise distances between all points

%% Build Z matrix
Zmat = zeros(len, len);
Zmat(eye(len) == 1) = diagonal_values; %set diagonal elements = diagonal_values(calculated before);
Zmat(~eye(len)) = -1j / 4 * besselh(0, 2, k * distances(~eye(len))) * dx * dz;  %set non-diagonal elements, using Hankel function;

% Solve the system of equations for a_vec : (I - Z * O) * a_vec = b_vec
b_vec=(E0*exp(-1j*k*(x_grid*sin(phi_inc)+z_grid*cos(phi_inc)))).';% Compute the incident field vector for all points in the grid
a_vec=(eye(len)-Zmat*Omat)\b_vec;

%% RCS
RCS = zeros(1, N);   % Initialize RCS storage
phi = linspace(0, 2*pi, N);  % Angular sampling for RCS
r = 10 * (d + 2 * R)^2 / lambda; % Far-field distance

%% calculating scattered field from a vector
u=zeros(N);
for n=1:N
    for m=1:N
            u(n,m)=-1j/4*besselh(0,2,k*sqrt((x_grid-X(n)).^2+(z_grid-Z(m)).^2))*a_vec*(k_cyl^2-k^2)*dx*dz;
    end
    RCS(n)=abs(-1j/4*besselh(0,2,k*sqrt((x_grid-r*sin(phi(n))).^2+(z_grid-r*cos(phi(n))).^2))*a_vec*(k_cyl^2-k^2)*dx*dz)^2;
end

RCS=2*pi*r*RCS/(E0^2); 

u_inc=E0*exp(-1j*k*(x*sin(phi_inc)+z*cos(phi_inc)));
base=zeros(length(Z));
base(x.^2+z.^2<R^2 | x.^2+(z-d).^2<R^2)=1;
u(isnan(u))=0; 


%% plotting scattered field
figure
imagesc(Z,X,real(u)); 
colormap jet;
colorbar;
title("scattered field - VMOM");
xlabel("z(m)");
ylabel("x(m)");
figure
%% plotting RCS
polarplot(phi,RCS); 
title("RCS - VMOM");
colormap jet;

