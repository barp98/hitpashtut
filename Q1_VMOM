%% Parameters
c = 3e8;                  % Speed of light [m/s]
freq = 11e9;              % Frequency [Hz]
omega = 2 * pi * freq;    % Angular frequency [rad/s]
lambda = c / freq;        % Wavelength [m]
epsilon_cyl = 1.9;       % Relative permittivity of the cylinder

% Wave numbers
k = omega / c;           % Free-space wave number [1/m]
k_cyl = k * sqrt(epsilon_cyl); % Wave number inside the cylinder

% Incident wave properties
phi_inc = pi/2;        % Incident wave angle [rad]
E0 = 1;                  % Incident electric field amplitude

% Cylinder and simulation parameters
R = 5 * lambda;          % Cylinder radius [m]
d = 3 * R;               % Distance between cylinder centers [m]
plotsize = 5*d;
%% Grid and Sampling Parameters
N = 200;             % Number of samples on each axis
Z = linspace(-2.5*d, 2.5*d + d - R, N); % z-coordinates
X = linspace(-2.5*d, 2.5*d + d - R, N); % x-coordinates
[z, x] = meshgrid(Z, X);  % Create 2D spatial grid

%% Grid Spacing
dx = X(2) - X(1); % Grid step size in x-direction
dz = Z(2) - Z(1); % Grid step size in z-direction

%% RCS Calculation Parameters
phi = linspace(0, 2*pi, N);  % Angular sampling for RCS
r = 4 * (d + 2 * R)^2 / lambda; % Far-field distance (r >> 2D^2/lambda)
RCS = zeros(1, N);   % Initialize RCS storage

%% defining paramaterization
O=zeros(length(Z));
O_mask = (x.^2 + z.^2 < R^2) | (x.^2 + (z - d).^2 < R^2);  % Boolean mask for scatterers
O_val = k_cyl^2 - k^2;
O(O_mask) = O_val;  % Set the O values where scatterers exist
len=nnz(O);
pos_x=zeros(1,len);
pos_z=zeros(1,len);

idx=1;
for n_=1:N
    for m_=1:N
        if(O(n_,m_)~=0)
            pos_x(idx)=x(n_,m_);
            pos_z(idx)=z(n_,m_);
            idx=idx+1;
        end
    end
end

%% calculating Z and O matrixes
diagonal_values = integral2(@(x,y) -1j/4*besselh(0,2,k*sqrt(x.^2+y.^2)),-dx/2,dx/2,-dz/2,dz/2);
Omat = eye(len).*(k_cyl^2-k^2);
% Compute distances for off-diagonal elements
[X1, X2] = meshgrid(pos_x, pos_x);
[Z1, Z2] = meshgrid(pos_z, pos_z);
distances = sqrt((X2 - X1).^2 + (Z2 - Z1).^2);

% Assign off-diagonal elements
Zmat = zeros(len, len);
Zmat(~eye(len)) = -1j / 4 * besselh(0, 2, k * distances(~eye(len))) * dx * dz;
Zmat(eye(len) == 1) = diagonal_values;

b_vec=(E0*exp(-1j*k*(pos_x*sin(phi_inc)+pos_z*cos(phi_inc)))).';
a_vec=(eye(len)-Zmat*Omat)\b_vec;

%% calculating scattered field from a vector
u=zeros(N);
for n_=1:N
    parfor m_=1:N
            u(n_,m_)=-1j/4*besselh(0,2,k*sqrt((pos_x-X(n_)).^2+(pos_z-Z(m_)).^2))*a_vec*(k_cyl^2-k^2)*dx*dz;
            %u(x,z)
    end
    RCS(n_)=abs(-1j/4*besselh(0,2,k*sqrt((pos_x-r*sin(phi(n_))).^2+(pos_z-r*cos(phi(n_))).^2))*a_vec*(k_cyl^2-k^2)*dx*dz)^2;
end

RCS=2*pi*r*RCS/(E0^2); %RCS final calculation

u_inc=E0*exp(-1j*k*(x*sin(phi_inc)+z*cos(phi_inc)));
%u(isnan(u))=O(isnan(u))-u_inc(isnan(u)); %for beautiful print


%% plotting
figure

subplot(1,2,1)
pcolor(Z,X,real(u));
shading interp; 
colorbar;
pbaspect([1 1 1]);
title("scattered field using VMOM, \phi_{inc}="+phi_inc*180/pi+char(176));
subtitle("R = " + R/lambda + "\lambda" + ", \epsilon = " + epsilon_cyl);
xlabel("z[m]");
ylabel("x[m]");

subplot(1,2,2)
polarplot(phi+pi,RCS);
ax=gca;
ax.ThetaZeroLocation = 'left';
title("RCS using VMOM, \phi_{inc}="+phi_inc*180/pi+char(176));
subtitle("R = " + R/lambda + "\lambda" + ", \epsilon = " + epsilon_cyl);
